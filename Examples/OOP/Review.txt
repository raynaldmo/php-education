Classes
---------
1.  Abstract class is template version of a parent class.

- used when instantiating a parent class isn't useful and
sub-classes that have a 'is a' relationship to the parent abstract class
are needed.

- abstract classes cannot be instantiated
- abstract classes are meant to be extended by sub-class(es)
- abstract methods are defined in abstract class (using abstract keyword)
and must be implemented by any subclass

- abstract class can implement non-abstract methods and attributes

abstract class Class1 {
  abstract protected function method1 ($var);
  abstract protected function method2 ($var);

  protected function method3($var) {
    // do something
  }

  protected $attr = 'class1';
}

class SubClass1 extends Class1 {
  function __construct($var) {
    // do something with $var
  }
  // Implement abstract method
  public function method1($var) {
    // do something with $var
  }

  // Implement abstract method
  public function method2($var) {
    // do something with $var
  }

}

2. An interface defines a specification for implementing some functionality
Classes that implement interfaces don't necessarily have an 'is a'
relationship to the interface

- an interface establishes a 'contract' for a class that implements
the interface
- interface cannot be instantiated
- all interface methods must be public
- interface cannot have attributes
- a class can implement multiple interfaces
(a class CANNOT inherit from multiple parents)

interface Crud {
  public function create($data);
  public function read();
  public function update($data);
  public function delete();
}

class User implements Crud {
  // implement all interface methods for user management

}

class Posts implements Crud {
  // implement all interface methods for blog post management
}

3. Traits allow you add functionality to a class without using
inheritance.

- Supported in PHP 5.4+
- traits allow code re-use outside of any class inheritance or class hierarchy
- traits cannot be instantiated
- log or debug functions are common usage
- multiple traits can be used by a class
(use Trait1, Trait2 ... ;)
- traits can have abstract methods

trait Logger {
  public function log($logString) {
    //....
  }
}

class Class1 {
  use Logger;
  ......
  function __construct($str) {
    $this->log($str);
  }

}

4. Type hinting is used in a method or a standalone function
to indicate the data type of method or function parameter


5. Namespaces prevent naming collisions between class names.
It's a way to encapsulate class names, thus preventing collisions.

To create a namespace, create file where all class definitions
(function definitions too) for that namespace will be created

- on first line of file
namespace CompanyName\LibraryName

- define classes

class Class1 { }
class Class2 { }

- to reference class in application , use fully qualified name

require '/CompanyName/LibraryName/library.php';

$obj = new \CompanyName\LibraryName\Class1();

or

use \CompanyName\LibraryName\Class1;
$obj = new Class1();

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Design Patterns
----------------

1. A design pattern is a best practice programming approach for solving a
particular design problem.

2. Design pattern categories
- Creation patterns create objects
* Singleton
* Factory
* Builder
* Prototype

- Structural patterns assist the creation and use of complex structures
* Composite
* Decorator
* Proxy

- Behavior patterns deals with how objects communicate and program flow
* Strategy
* Observer
* Template

3. Object creation patterns

- Singleton pattern is used when an application requires a single
instance of some class. This pattern guarantees this same single
instance is used by all application components/code

- Factory pattern is useful when the type of object to be
created isn't known until run-time. It can dynamically create
class objects based on user or other input.

5. Structural patterns

- Composite pattern is used in situations where a single entity and
a collection of these entities need the same functionality

Ex. Form and individual form elements need to be displayed,
validated, added, removed etc.

6. Behavioral patterns

- Strategy pattern allows algorithms to process objects to change
dynamically

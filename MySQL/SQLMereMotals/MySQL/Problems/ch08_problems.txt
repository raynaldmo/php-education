
Sales Orders Database
----------------------
1. “List customers and the dates they placed an order, sorted in order date sequence.”
(Hint: The solution requires a JOIN of two tables.)

You can find the solution in CH08_Customers_And_OrderDates (944 rows).

Solution:

select c.CustFirstName,c.CustLastName,o.OrderNumber,o.OrderDate
from Customers as c join Orders as o using(CustomerID)
order by o.OrderDate,o.OrderNumber;
+---------------+--------------+-------------+------------+
| CustFirstName | CustLastName | OrderNumber | OrderDate  |
+---------------+--------------+-------------+------------+
| David         | Smith        |           1 | 2012-09-01 |
| Suzanne       | Viescas      |           2 | 2012-09-01 |
| William       | Thompson     |           3 | 2012-09-01 |

....

| William       | Thompson     |         942 | 2013-02-28 |
| Kirk          | DeGrasse     |         943 | 2013-02-28 |
| Joyce         | Bonnicksen   |         944 | 2013-02-28 |
+---------------+--------------+-------------+------------+
944 rows in set (0.00 sec)


2. “List employees and the customers for whom they booked an order.”
(Hint: The solution requires a JOIN of more than two tables.)

You can find the solution in CH08_Employees_And_Customers (211 rows).

Solution:

SELECT distinct concat(e.EmpFirstName, ' ', e.EmpLastName) as EmpFullName,
concat(c.CustFirstName, ' ', c.CustLastName) as CustFullName
from (Employees as e join Orders as o on (e.EmployeeID = o.EmployeeID))
join Customers as c on (c.CustomerID = o.CustomerID);

3. “Display all orders, the products in each order, and the amount owed for
each product, in order number sequence.”
(Hint: The solution requires a JOIN of more than two tables.)

You can find the solution in CH08_Orders_With_Products (3,973 rows).

Solution:

select o.OrderNumber,o.OrderDate,p.ProductName,od.QuantityOrdered as Quantity,
od.QuotedPrice as Price,(od.QuotedPrice * od.QuantityOrdered) as AmoutOwed
from Orders as o join Order_Details as od on (o.OrderNumber = od.OrderNumber)
join Products as p on (p.ProductNumber = od.ProductNumber)
order by o.OrderNumber
limit 20;
+-------------+------------+-----------------------------------+----------+---------+-----------+
| OrderNumber | OrderDate  | ProductName                       | Quantity | Price   | AmoutOwed |
+-------------+------------+-----------------------------------+----------+---------+-----------+
|           1 | 2012-09-01 | Trek 9000 Mountain Bike           |        2 | 1200.00 |   2400.00 |
|           1 | 2012-09-01 | Viscount Mountain Bike            |        3 |  635.00 |   1905.00 |
|           1 | 2012-09-01 | GT RTS-2 Mountain Bike            |        4 | 1650.00 |   6600.00 |

....

4. “Show me the vendors and the products they supply to us for products that
cost less than $100.”
(Hint: The solution requires a JOIN of more than two tables.)

You can find the solution in CH08_Vendors_And_Products_Less_Than_100 (66 rows).

Solution:

select v.VendorID,v.VendName,p.ProductNumber,p.ProductName,
pv.WholesalePrice as Price
from Vendors as v join Product_Vendors as pv on (v.VendorID = pv.VendorID)
join Products as p on (p.ProductNumber = pv.ProductNumber)
where pv.WholesalePrice < 100.0
order by v.VendName;
+----------+------------------------+---------------+---------------------------------------+-------+
| VendorID | VendName               | ProductNumber | ProductName                           | Price |
+----------+------------------------+---------------+---------------------------------------+-------+
|       10 | Armadillo Brand        |            22 | Pro-Sport 'Dillo Shades               | 63.55 |
|       10 | Armadillo Brand        |            30 | Clear Shade 85-T Glasses              | 32.87 |
|       10 | Armadillo Brand        |            31 | True Grip Competition Gloves          | 16.90 |

......

5. “Show me customers and employees who have the same last name.”
(Hint: The solution requires a JOIN on matching values.)

You can find the solution in CH08_Customers_Employees_Same_LastName (16 rows).

Solution:

select c.CustLastName,c.CustFirstName,e.EmpLastName,e.EmpFirstName
from Customers as c join Employees as e on (c.CustLastName = e.EmpLastName)
order by c.CustLastName;
+--------------+---------------+-------------+--------------+
| CustLastName | CustFirstName | EmpLastName | EmpFirstName |
+--------------+---------------+-------------+--------------+
| DeGrasse     | Kirk          | DeGrasse    | Kirk         |
| Patterson    | Rachel        | Patterson   | Kathryn      |
| Patterson    | Luke          | Patterson   | Ann          |


6. “Show me customers and employees who live in the same city.”
(Hint: The solution requires a JOIN on matching values.)

You can find the solution in CH08_Customers_Employees_Same_City (10 rows).

Solution:

select c.CustFirstName, c.CustLastName,
e.EmpFirstName, e.EmpLastName, e.EmpCity as City
from Customers as c join Employees as e on (c.CustCity = e.EmpCity)
order by City;

select c.CustFirstName, c.CustLastName,  e.EmpFirstName,
e.EmpLastName, e.EmpCity as City
from Customers as c join Employees as e on (c.CustCity = e.EmpCity)
order by City;
+---------------+--------------+--------------+-------------+-------------+
| CustFirstName | CustLastName | EmpFirstName | EmpLastName | City        |
+---------------+--------------+--------------+-------------+-------------+
| Gary          | Hallmark     | Ann          | Patterson   | Auburn      |
| Joyce         | Bonnicksen   | Susan        | McLain      | Bellevue    |
| Liz           | Keyser       | Susan        | McLain      | Bellevue    |


Entertainment Agency Database
-----------------------------

1. “Display agents and the engagement dates they booked, sorted by booking
start date.”

(Hint: The solution requires a JOIN of two tables.)

You can find the solution in CH08_Agents_Booked_Dates (111 rows).

Solution:

select a.AgtFirstName,a.AgtLastName,e.EngagementNumber,e.StartDate,e.EndDate
from Agents as a join Engagements as e
on (a.AgentID = e.AgentID)
order by a.AgtLastName,e.StartDate;
+--------------+-------------+------------------+------------+------------+
| AgtFirstName | AgtLastName | EngagementNumber | StartDate  | EndDate    |
+--------------+-------------+------------------+------------+------------+
| Scott        | Bishop      |                9 | 2012-09-18 | 2012-09-28 |
| Scott        | Bishop      |               58 | 2012-12-01 | 2012-12-04 |
| Scott        | Bishop      |               62 | 2012-12-09 | 2012-12-10 |

....

| Marianne     | Wier        |              115 | 2013-02-19 | 2013-02-22 |
| Marianne     | Wier        |              122 | 2013-02-24 | 2013-02-27 |
| Marianne     | Wier        |              129 | 2013-02-24 | 2013-03-05 |
+--------------+-------------+------------------+------------+------------+
111 rows in set (0.01 sec)


2. “List customers and the entertainers they booked.”

(Hint: The solution requires a JOIN of more than two tables.)

You can find the solution in CH08_Customers_Booked_Entertainers (75 rows).

3. “Find the agents and entertainers who live in the same postal code.”

(Hint: The solution requires a JOIN on matching values.)

You can find the solution in CH08_Agents_Entertainers_Same_Postal (10 rows).

School Scheduling Database
----------------------------

1. “Display buildings and all the classrooms in each building.”

(Hint: The solution requires a JOIN of two tables.)

You can find the solution in CH08_Buildings_Classrooms (47 rows).

2. “List students and all the classes in which they are currently enrolled.”

(Hint: The solution requires a JOIN of more than two tables.)

You can find the solution in CH08_Student_Enrollments (50 rows).

3. “List the faculty staff and the subject each teaches.”

(Hint: The solution requires a JOIN of more than two tables.)

You can find the solution in CH08_Staff_Subjects (110 rows).

4. “Show me the students who have a grade of 85 or better in art and who also
have a grade of 85 or better in any computer course.”

(Hint: The solution requires a JOIN on matching values.)

You can find the solution in CH08_Good_Art_CS_Students (1 row).
Bowling League Database

1. “List the bowling teams and all the team members.”

(Hint: The solution requires a JOIN of two tables.)

You can find the solution in CH08_Teams_And_Bowlers (32 rows).

2. “Display the bowlers, the matches they played in, and the bowler game scores.”

(Hint: The solution requires a JOIN of more than two tables.)

You can find the solution in CH08_Bowler_Game_Scores (1,344 rows).

3. “Find the bowlers who live in the same ZIP Code.”

(Hint: The solution requires a JOIN on matching values, and be sure to not
match bowlers with themselves.)

You can find the solution in CH08_Bowlers_Same_ZipCode (92 rows).
Recipes Database

1. “List all the recipes for salads.”

(Hint: The solution requires a JOIN of two tables.)

You can find the solution in CH08_Salads (1 row).

2. “List all recipes that contain a dairy ingredient.”

(Hint: The solution requires a JOIN of more than two tables.)

You can find the solution in CH08_Recipes_Containing_Dairy (2 rows).

3. “Find the ingredients that use the same default measurement amount.”

(Hint: The solution requires a JOIN on matching values.)

You can find the solution in CH08_Ingredients_Same_Measure (628 rows).

4. “Show me the recipes that have beef and garlic.”

(Hint: The solution requires a JOIN on matching values.)

You can find the solution in CH08_Beef_And_Garlic_Recipes (1 row).